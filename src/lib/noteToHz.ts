export type Note =
  | "C2"
  | "C#2"
  | "D2"
  | "D#2"
  | "E2"
  | "F2"
  | "F#2"
  | "G2"
  | "G#2"
  | "A2"
  | "A#2"
  | "B2"
  | "C3"
  | "C#3"
  | "D3"
  | "D#3"
  | "E3"
  | "F3"
  | "F#3"
  | "G3"
  | "G#3"
  | "A3"
  | "A#3"
  | "B3"
  | "C4"
  | "C#4"
  | "D4"
  | "D#4"
  | "E4"
  | "F4"
  | "F#4"
  | "G4"
  | "G#4"
  | "A4"
  | "A#4"
  | "B4"
  | "C5"
  | "C#5"
  | "D5"
  | "D#5"
  | "E5"
  | "F5"
  | "F#5"
  | "G5"
  | "G#5"
  | "A5"
  | "A#5"
  | "B5"
  | "C6"
  | "C#6"
  | "D6"
  | "D#6"
  | "E6"
  | "F6"
  | "F#6"
  | "G6"
  | "G#6"
  | "A6"
  | "A#6"
  | "B6"
  | "C7";

const noteToSemitone = new Map<Note, number>([
  ["C2", -33],
  ["C#2", -32],
  ["D2", -31],
  ["D#2", -30],
  ["E2", -29],
  ["F2", -28],
  ["F#2", -27],
  ["G2", -26],
  ["G#2", -25],
  ["A2", -24],
  ["A#2", -23],
  ["B2", -22],
  ["C3", -21],
  ["C#3", -20],
  ["D3", -19],
  ["D#3", -18],
  ["E3", -17],
  ["F3", -16],
  ["F#3", -15],
  ["G3", -14],
  ["G#3", -13],
  ["A3", -12],
  ["A#3", -11],
  ["B3", -10],
  ["C4", -9],
  ["C#4", -8],
  ["D4", -7],
  ["D#4", -6],
  ["E4", -5],
  ["F4", -4],
  ["F#4", -3],
  ["G4", -2],
  ["G#4", -1],
  ["A4", 0],
  ["A#4", 1],
  ["B4", 2],
  ["C5", 3],
  ["C#5", 4],
  ["D5", 5],
  ["D#5", 6],
  ["E5", 7],
  ["F5", 8],
  ["F#5", 9],
  ["G5", 10],
  ["G#5", 11],
  ["A5", 12],
  ["A#5", 13],
  ["B5", 14],
  ["C6", 15],
  ["C#6", 16],
  ["D6", 17],
  ["D#6", 18],
  ["E6", 19],
  ["F6", 20],
  ["F#6", 21],
  ["G6", 22],
  ["G#6", 23],
  ["A6", 24],
  ["A#6", 25],
  ["B6", 26],
  ["C7", 27],
]);

export function getNoteFrequency(note: Note, octave?: -2 | -1 | 0 | 1 | 2) {
  if (!octave) {
    return getFrequency(noteToSemitone.get(note) ?? 0);
  } else {
    const noteSemitones = noteToSemitone.get(note) ?? 0;
    return getFrequency(noteSemitones + 12 * octave);
  }
}

function getFrequency(steps: number) {
  return (2 ** (1 / 12)) ** steps * 440;
}
